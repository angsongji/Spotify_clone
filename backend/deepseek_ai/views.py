from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
import re
from .deepseek import call_deepseek
from spotify.models import Song
from spotify.serializers import SongSerializer
from rapidfuzz import fuzz
from unidecode import unidecode

@csrf_exempt
def chat_handler(request):
    if request.method == "POST":
        data = json.loads(request.body)
        message = data.get("message", "").strip()

        # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu ph√°t nh·∫°c ho·∫∑c m·ªü b√†i h√°t
        match = re.search(r'(m·ªü|ph√°t)(?: b√†i h√°t)?\s+"([^"]+)"(?: c·ªßa "([^"]+)")?', message, re.IGNORECASE)
        if match:
            song_name = match.group(2).strip()
            artist_name = match.group(3).strip() if match.group(3) else None
            song = search_song_in_db(song_name, artist_name)

            if song:
                song_data = SongSerializer(song).data
                return JsonResponse({
                    "type": "music",
                    "id": song_data["id"],
                    "message": "T√¥i s·∫Ω ph√°t b√†i h√°t n√†y ngay trong ·ª©ng d·ª•ng."
                })
            else: 
                # N·∫øu kh√¥ng c√≥ trong ·ª©ng d·ª•ng, g·ªçi AI ƒë·ªÉ g·ª£i √Ω ngu·ªìn ngo√†i
                prompt = (
                    f"T√¥i ƒëang x√¢y d·ª±ng m·ªôt ·ª©ng d·ª•ng ph√°t nh·∫°c. Ng∆∞·ªùi d√πng v·ª´a y√™u c·∫ßu ph√°t b√†i h√°t '{song_name}', "
                    f"nh∆∞ng ·ª©ng d·ª•ng kh√¥ng c√≥ b√†i n√†y. H√£y g·ª£i √Ω n∆°i h·ªç c√≥ th·ªÉ nghe b√†i h√°t ƒë√≥ nh∆∞ tr√™n YouTube, Spotify ho·∫∑c Zing MP3. "
                    f"Tr·∫£ k·∫øt qu·∫£ g·ªçn g√†ng, k√®m ƒë∆∞·ªùng link n·∫øu c√≥ th·ªÉ."
                )
                ai_response = call_deepseek(prompt)
                return JsonResponse({
                    "type": "ai",
                    "message": f"Kh√¥ng t√¨m th·∫•y b√†i h√°t '{song_name}' trong ·ª©ng d·ª•ng.\n{ai_response}"
                })

        # Kh√¥ng ph·∫£i y√™u c·∫ßu ph√°t nh·∫°c ‚Üí x·ª≠ l√Ω b√¨nh th∆∞·ªùng
        
        ai_response = call_deepseek(message)
        ai_response = ai_response.replace('\n', '\n\n')  # Markdown c·∫ßn 2 d√≤ng ƒë·ªÉ xu·ªëng ƒëo·∫°n
        return JsonResponse({"type": "ai", "message": ai_response})

    return JsonResponse({"error": "Ch·ªâ h·ªó tr·ª£ ph∆∞∆°ng th·ª©c POST."}, status=405)



def search_song_in_db(song_name, artist_name=None):
    normalized_song = unidecode(song_name).lower()
    normalized_artist = unidecode(artist_name).lower() if artist_name else None

    songs = Song.objects.filter(status = 1)
    best_match = None
    highest_score = 0

    for song in songs:
        song_name_normalized = unidecode(song.name).lower()
        name_score = fuzz.token_sort_ratio(normalized_song, song_name_normalized)

        if normalized_artist:
            artist_scores = [
                fuzz.token_sort_ratio(normalized_artist, unidecode(artist).lower())
                for artist in song.artists
            ]
            artist_score = max(artist_scores) if artist_scores else 0

            if artist_score < 60:
                continue

            total_score = (name_score + artist_score) / 2
        else:
            total_score = name_score

        if total_score > highest_score:
            highest_score = total_score
            best_match = song

    if highest_score > 70:
        return best_match  # üëà tr·∫£ v·ªÅ object Song thay v√¨ dict

    return None
